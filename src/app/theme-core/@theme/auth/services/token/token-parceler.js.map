{"version":3,"file":"token-parceler.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token-parceler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAEnE,OAAO,EAAE,iBAAiB,EAAiC,MAAM,SAAS,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AAOpD,MAAM,CAAC,IAAM,sBAAsB,GAAG,IAAI,cAAc,CAAmB,sBAAsB,CAAC,CAAC;;;;;IAQjG,6BAAoD,eACR;QADQ,kBAAa,GAAb,aAAa;QACrB,iBAAY,GAAZ,YAAY;KACvD;IAED,kCAAI,GAAJ,UAAK,KAAkB;QACrB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACpB,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE;YACrB,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;SACxB,CAAC,CAAC;KACJ;IAED,oCAAM,GAAN,UAAO,KAAa;QAClB,IAAI,UAA4B,CAAC;QACjC,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,IAAI,CAAC;YACH,IAAM,SAAS,GAAgB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjD,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC;YACvE,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC;SAC9B;QAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACX,UAAU,GAAG,IAAI,CAAC,aAAa,CAAA;SAChC;QAED,MAAM,CAAC,iBAAiB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;KAClD;IAED,yDAAyD;;IAC/C,4CAAc;;IAAxB,UAAyB,IAAI;QAC3B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAC,UAA4B,IAAK,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;KAC3F;;gBAhCF,UAAU;;;;gDAGI,MAAM,SAAC,sBAAsB;4CAC7B,MAAM,SAAC,cAAc;;8BAnBpC;;SAgBa,mBAAmB","sourcesContent":["import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { nbAuthCreateToken, NbAuthToken, NbAuthTokenClass } from './token';\nimport { NB_AUTH_TOKENS } from '../../auth.options';\n\nexport interface NbTokenPack {\n  name: string,\n  value: string,\n}\n\nexport const NB_AUTH_FALLBACK_TOKEN = new InjectionToken<NbAuthTokenClass>('Nebular Auth Options');\n\n/**\n * Creates a token parcel which could be stored/restored\n */\n@Injectable()\nexport class NbAuthTokenParceler {\n\n  constructor(@Inject(NB_AUTH_FALLBACK_TOKEN) private fallbackClass: NbAuthTokenClass,\n              @Inject(NB_AUTH_TOKENS) private tokenClasses: NbAuthTokenClass[]) {\n  }\n\n  wrap(token: NbAuthToken): string {\n    return JSON.stringify({\n      name: token.getName(),\n      value: token.toString(),\n    });\n  }\n\n  unwrap(value: string): NbAuthToken {\n    let tokenClass: NbAuthTokenClass;\n    let tokenValue = '';\n\n    try {\n      const tokenPack: NbTokenPack = JSON.parse(value);\n      tokenClass = this.getClassByName(tokenPack.name) || this.fallbackClass;\n      tokenValue = tokenPack.value;\n    } catch (e) {\n      tokenClass = this.fallbackClass\n    }\n\n    return nbAuthCreateToken(tokenClass, tokenValue);\n  }\n\n  // TODO: this could be moved to a separate token registry\n  protected getClassByName(name): NbAuthTokenClass {\n    return this.tokenClasses.find((tokenClass: NbAuthTokenClass) => tokenClass.NAME === name);\n  }\n}\n"]}