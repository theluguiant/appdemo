{"version":3,"file":"token.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/services/token/token.ts"],"names":[],"mappings":"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","sourcesContent":["import { urlBase64Decode } from '../../helpers';\n\nexport abstract class NbAuthToken {\n  abstract getValue(): string;\n  abstract isValid(): boolean;\n  abstract getPayload(): string;\n  abstract toString(): string;\n\n  getName(): string {\n    return (this.constructor as NbAuthTokenClass).NAME;\n  }\n}\n\nexport interface NbAuthRefreshableToken {\n  getRefreshToken(): string;\n}\n\nexport interface NbAuthTokenClass {\n  NAME: string;\n  new (raw: any): NbAuthToken;\n}\n\nexport function nbAuthCreateToken(tokenClass: NbAuthTokenClass, token: any) {\n  return new tokenClass(token);\n}\n\n/**\n * Wrapper for simple (text) token\n */\nexport class NbAuthSimpleToken extends NbAuthToken {\n\n  static NAME = 'nb:auth:simple:token';\n\n  constructor(protected readonly token: any) {\n    super();\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token;\n  }\n\n  getPayload(): string {\n    return null;\n  }\n\n  /**\n   * Is non empty and valid\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return !!this.getValue();\n  }\n\n  /**\n   * Validate value and convert to string, if value is not valid return empty string\n   * @returns {string}\n   */\n  toString(): string {\n    return !!this.token ? this.token : '';\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:jwt:token';\n\n  /**\n   * Returns payload object\n   * @returns any\n   */\n  getPayload(): any {\n\n    if (!this.token) {\n      throw new Error('Cannot extract payload from an empty token.');\n    }\n\n    const parts = this.token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error(`The token ${this.token} is not valid JWT token and must consist of three parts.`);\n    }\n\n    let decoded;\n    try {\n      decoded = urlBase64Decode(parts[1]);\n    } catch (e) {\n      throw new Error(`The token ${this.token} is not valid JWT token and cannot be parsed.`);\n    }\n\n    if (!decoded) {\n      throw new Error(`The token ${this.token} is not valid JWT token and cannot be decoded.`);\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n}\n\nconst prepareOAuth2Token = (data) => {\n  if (typeof data === 'string') {\n    try {\n      return JSON.parse(data);\n    } catch (e) {}\n  }\n  return data;\n};\n\n/**\n * Wrapper for OAuth2 token\n */\nexport class NbAuthOAuth2Token extends NbAuthSimpleToken {\n\n  static NAME = 'nb:auth:oauth2:token';\n\n  constructor(protected data: { [key: string]: string|number }|string = {}) {\n    // we may get it as string when retrieving from a storage\n    super(prepareOAuth2Token(data));\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue(): string {\n    return this.token.access_token;\n  }\n\n  /**\n   * Returns the refresh token\n   * @returns string\n   */\n  getRefreshToken(): string {\n    return this.token.refresh_token;\n  }\n\n  /**\n   * Returns token payload\n   * @returns any\n   */\n  getPayload(): any {\n    if (!this.token || !Object.keys(this.token).length) {\n      throw new Error('Cannot extract payload from an empty token.');\n    }\n\n    return this.token;\n  }\n\n  /**\n   * Returns the token type\n   * @returns string\n   */\n  getType(): string {\n    return this.token.token_type;\n  }\n\n  /**\n   * Is data expired\n   * @returns {boolean}\n   */\n  isValid(): boolean {\n    return super.isValid() && (!this.getTokenExpDate() || new Date() < this.getTokenExpDate());\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    if (!this.token.hasOwnProperty('expires_in')) {\n      return null;\n    }\n\n    const date = new Date();\n    date.setUTCSeconds(new Date().getUTCSeconds() + Number(this.token.expires_in));\n\n    return date;\n  }\n\n  /**\n   * Convert to string\n   * @returns {string}\n   */\n  toString(): string {\n    return JSON.stringify(this.token);\n  }\n}\n"]}