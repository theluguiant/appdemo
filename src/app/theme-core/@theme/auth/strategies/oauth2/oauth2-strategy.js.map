{"version":3,"file":"oauth2-strategy.js","sourceRoot":"","sources":["../../../../../.ng_build/auth/strategies/oauth2/oauth2-strategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { NB_WINDOW } from '@nebular/theme';\n\nimport { NbAuthStrategy } from '../auth-strategy';\nimport { NbAuthRefreshableToken, NbAuthResult } from '../../services/';\nimport { NbOAuth2AuthStrategyOptions, NbOAuth2ResponseType, auth2StrategyOptions } from './oauth2-strategy.options';\nimport { NbAuthStrategyClass } from '../../auth.options';\n\n\n/**\n * OAuth2 authentication strategy.\n *\n * Strategy settings:\n *\n * ```ts\n * export enum NbOAuth2ResponseType {\n *   CODE = 'code',\n *   TOKEN = 'token',\n * }\n *\n * export enum NbOAuth2GrantType {\n *   AUTHORIZATION_CODE = 'authorization_code',\n *   REFRESH_TOKEN = 'refresh_token',\n * }\n *\n * export class NbOAuth2AuthStrategyOptions {\n *   name: string;\n *   baseEndpoint?: string = '';\n *   clientId: string = '';\n *   clientSecret: string = '';\n *   redirect?: { success?: string; failure?: string } = {\n *     success: '/',\n *     failure: null,\n *   };\n *   defaultErrors?: any[] = ['Something went wrong, please try again.'];\n *   defaultMessages?: any[] = ['You have been successfully authenticated.'];\n *   authorize?: {\n *     endpoint?: string;\n *     redirectUri?: string;\n *     responseType?: string;\n *     scope?: string;\n *     state?: string;\n *     params?: { [key: string]: string };\n *   } = {\n *     endpoint: 'authorize',\n *     responseType: NbOAuth2ResponseType.CODE,\n *   };\n *   token?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     redirectUri?: string;\n *     class: NbAuthTokenClass,\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.AUTHORIZATION_CODE,\n *     class: NbAuthOAuth2Token,\n *   };\n *   refresh?: {\n *     endpoint?: string;\n *     grantType?: string;\n *     scope?: string;\n *   } = {\n *     endpoint: 'token',\n *     grantType: NbOAuth2GrantType.REFRESH_TOKEN,\n *   };\n * }\n * ```\n *\n */\n@Injectable()\nexport class NbOAuth2AuthStrategy extends NbAuthStrategy {\n\n  static setup(options: NbOAuth2AuthStrategyOptions): [NbAuthStrategyClass, NbOAuth2AuthStrategyOptions] {\n    return [NbOAuth2AuthStrategy, options];\n  }\n\n  get responseType() {\n    return this.getOption('authorize.responseType');\n  }\n\n  protected redirectResultHandlers = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        switchMap((params: any) => {\n          if (params.code) {\n            return this.requestToken(params.code)\n          }\n\n          return observableOf(\n            new NbAuthResult(\n              false,\n              params,\n              this.getOption('redirect.failure'),\n              this.getOption('defaultErrors'),\n              [],\n            ));\n        }),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => {\n          if (!params.error) {\n            return new NbAuthResult(\n              true,\n              params,\n              this.getOption('redirect.success'),\n              [],\n              this.getOption('defaultMessages'),\n              this.createToken(params));\n          }\n\n          return new NbAuthResult(\n            false,\n            params,\n            this.getOption('redirect.failure'),\n            this.getOption('defaultErrors'),\n            [],\n          );\n        }),\n      );\n    },\n  };\n\n  protected redirectResults = {\n    [NbOAuth2ResponseType.CODE]: () => {\n      return observableOf(this.route.snapshot.queryParams).pipe(\n        map((params: any) => !!(params && (params.code || params.error))),\n      );\n    },\n    [NbOAuth2ResponseType.TOKEN]: () => {\n      return observableOf(this.route.snapshot.fragment).pipe(\n        map(fragment => this.parseHashAsQueryParams(fragment)),\n        map((params: any) => !!(params && (params.access_token || params.error))),\n      );\n    },\n  };\n\n  protected defaultOptions: NbOAuth2AuthStrategyOptions = auth2StrategyOptions;\n\n  constructor(protected http: HttpClient,\n              private route: ActivatedRoute,\n              @Inject(NB_WINDOW) private window: any) {\n    super();\n  }\n\n  authenticate(): Observable<NbAuthResult> {\n    return this.isRedirectResult()\n      .pipe(\n        switchMap((result: boolean) => {\n          if (!result) {\n            this.authorizeRedirect();\n            return observableOf(new NbAuthResult(true));\n          }\n          return this.getAuthorizationResult();\n        }),\n      );\n  }\n\n  getAuthorizationResult(): Observable<any> {\n    const redirectResultHandler = this.redirectResultHandlers[this.responseType];\n    if (redirectResultHandler) {\n      return redirectResultHandler.call(this);\n    }\n\n    throw new Error(`'${this.responseType}' responseType is not supported,\n                      only 'token' and 'code' are supported now`);\n  }\n\n  refreshToken(token: NbAuthRefreshableToken): Observable<NbAuthResult> {\n    const url = this.getActionEndpoint('refresh');\n\n    return this.http.post(url, this.buildRefreshRequestData(token))\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res));\n        }),\n        catchError((res) => {\n          let errors = [];\n          if (res instanceof HttpErrorResponse) {\n            errors = this.getOption('defaultErrors');\n          } else {\n            errors.push('Something went wrong.');\n          }\n\n          return observableOf(\n            new NbAuthResult(\n              false,\n              res,\n              this.getOption('redirect.failure'),\n              errors,\n              [],\n            ));\n        }),\n      );\n  }\n\n  protected authorizeRedirect() {\n    this.window.location.href = this.buildRedirectUrl();\n  }\n\n  protected isRedirectResult(): Observable<boolean> {\n    return this.redirectResults[this.responseType].call(this);\n  }\n\n  protected requestToken(code: string) {\n    const url = this.getActionEndpoint('token');\n\n    return this.http.post(url, this.buildCodeRequestData(code))\n      .pipe(\n        map((res) => {\n          return new NbAuthResult(\n            true,\n            res,\n            this.getOption('redirect.success'),\n            [],\n            this.getOption('defaultMessages'),\n            this.createToken(res));\n        }),\n        catchError((res) => {\n          let errors = [];\n          if (res instanceof HttpErrorResponse) {\n            errors = this.getOption('defaultErrors');\n          } else {\n            errors.push('Something went wrong.');\n          }\n\n          return observableOf(\n            new NbAuthResult(\n              false,\n              res,\n              this.getOption('redirect.failure'),\n              errors,\n              [],\n            ));\n        }),\n      );\n  }\n\n  protected buildCodeRequestData(code: string): any {\n    const params = {\n      grant_type: this.getOption('token.grantType'),\n      code: code,\n      redirect_uri: this.getOption('token.redirectUri'),\n      client_id: this.getOption('clientId'),\n    };\n\n    Object.entries(params)\n      .forEach(([key, val]) => !val && delete params[key]);\n\n    return params;\n  }\n\n  protected buildRefreshRequestData(token: NbAuthRefreshableToken): any {\n    const params = {\n      grant_type: this.getOption('refresh.grantType'),\n      refresh_token: token.getRefreshToken(),\n      scope: this.getOption('refresh.scope'),\n    };\n\n    Object.entries(params)\n      .forEach(([key, val]) => !val && delete params[key]);\n\n    return params;\n  }\n\n  protected buildRedirectUrl() {\n    const params = {\n      response_type: this.getOption('authorize.responseType'),\n      client_id: this.getOption('clientId'),\n      redirect_uri: this.getOption('authorize.redirectUri'),\n      scope: this.getOption('authorize.scope'),\n      state: this.getOption('authorize.state'),\n\n      ...this.getOption('authorize.params'),\n    };\n\n    const endpoint = this.getActionEndpoint('authorize');\n    const query = Object.entries(params)\n      .filter(([key, val]) => !!val)\n      .map(([key, val]: [string, string]) => `${key}=${encodeURIComponent(val)}`)\n      .join('&');\n\n    return `${endpoint}?${query}`;\n  }\n\n  protected parseHashAsQueryParams(hash: string): { [key: string]: string } {\n    return hash ? hash.split('&').reduce((acc: any, part: string) => {\n      const item = part.split('=');\n      acc[item[0]] = decodeURIComponent(item[1]);\n      return acc;\n    }, {}) : {};\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    throw new Error('`register` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    throw new Error('`requestPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    throw new Error('`resetPassword` is not supported by `NbOAuth2AuthStrategy`, use `authenticate`.');\n  }\n\n  logout(): Observable<NbAuthResult> {\n    return observableOf(new NbAuthResult(true));\n  }\n}\n"]}